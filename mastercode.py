from flask import Flask, jsonify, requestfrom google.oauth2 import service_accountfrom googleapiclient.discovery import buildimport osimport jsonimport requestsimport loggingimport base64app = Flask(__name__)# Configure logginglogging.basicConfig(level=logging.INFO)# Function to load credentials from base64 encoded stringdef load_credentials_from_base64():    try:        creds_base64 = os.environ.get('GOOGLE_APPLICATION_CREDENTIALS_BASE64')        if not creds_base64:            raise ValueError("Environment variable GOOGLE_APPLICATION_CREDENTIALS_BASE64 not set.")                logging.info("Decoding base64 credentials")        creds_json = base64.b64decode(creds_base64).decode('utf-8')        credentials_info = json.loads(creds_json)                credentials = service_account.Credentials.from_service_account_info(            credentials_info,            scopes=['https://www.googleapis.com/auth/spreadsheets.readonly']        )        logging.info("Credentials loaded successfully")        return credentials    except Exception as e:        logging.error(f"Error loading credentials: {e}")        raise# Function to get data from Google Sheetsdef get_sheet_data():    try:        logging.info("Fetching credentials")        credentials = load_credentials_from_base64()                # Build the Sheets API client        logging.info("Building Sheets API client")        service = build('sheets', 'v4', credentials=credentials)        # Define the spreadsheet ID and range        spreadsheet_id = os.environ.get('SPREADSHEET_ID')        range_name = os.environ.get('RANGE_NAME')                if not spreadsheet_id or not range_name:            raise ValueError("Environment variables SPREADSHEET_ID or RANGE_NAME not set.")        # Call the Sheets API        logging.info(f"Fetching data from Google Sheets: {spreadsheet_id}, range: {range_name}")        result = service.spreadsheets().values().get(            spreadsheetId=spreadsheet_id,            range=range_name        ).execute()        values = result.get('values', [])        logging.info(f"Fetched {len(values)} rows from the sheet")        return values    except Exception as e:        logging.error(f"Error fetching data from Google Sheets: {e}")        raise@app.route('/data', methods=['GET'])def data():    try:        logging.info("Handling /data request")        values = get_sheet_data()        if not values:            logging.info("No data found in the sheet")            return jsonify({"error": "No data found"}), 404        logging.info("Data found, returning response")        return jsonify({"data": values})    except Exception as e:        logging.error(f"Error in /data endpoint: {e}")        return jsonify({"error": "An unexpected error occurred."}), 500# Function to fetch product detailsdef fetch_product_details(product_name):    try:        logging.info(f"Fetching product details for {product_name}")        response = requests.get("https://boat-zincs-f2cb81952aef.herokuapp.com/data")        response.raise_for_status()        data = response.json().get("data", [])        for product in data:            if product_name.lower() in product[0].lower():                logging.info(f"Product found: {product[0]}")                return product  # Returning the whole product information (name and URL)        logging.info("Product not found in the data")    except requests.RequestException as e:        logging.error(f"Request error: {e}")    return None# Function to generate a response based on product availabilitydef generate_response(product_name):    try:        logging.info(f"Generating response for product: {product_name}")        product = fetch_product_details(product_name)        if product:            logging.info("Product available")            return f"We have the [{product[0]}]({product[1]}) available for purchase."        else:            logging.info("Product not available")            return (f"We currently do not have the '{product_name}' in our system, but we may have it in stock. "                    f"Please visit [Zincs for Boats](https://zincsforboats.com) and use the on-site search option, "                    f"which may deliver a result for this product. We are still learning our website links and products in stock. "                    f"Thank you for visiting today, and we appreciate the opportunity to earn your business.")    except Exception as e:        logging.error(f"Error generating response: {e}")        return "An unexpected error occurred."# Route to test the response generation@app.route('/get_response', methods=['GET'])def get_response():    try:        logging.info("Handling /get_response request")        product_name = request.args.get('product_name')        if not product_name:            logging.info("Product name not provided")            return jsonify({"error": "Product name is required"}), 400                response_message = generate_response(product_name)        logging.info("Returning generated response")        return jsonify({"message": response_message})    except Exception as e:        logging.error(f"Error in /get_response endpoint: {e}")        return jsonify({"error": "An unexpected error occurred."}), 500@app.errorhandler(Exception)def handle_exception(e):    logging.error(f"Unhandled error: {e}")    return jsonify({"error": "An unexpected error occurred."}), 500if __name__ == '__main__':    port = int(o